.. _processing-and-logic:

Processing and Logic
====================

Processing and Logic provides a programming environment to perform calculations, make decisions and take actions.

Some examples include:

- transform a series using an equation
- alarm based on mutiple parameter values
- generate a series forecast to provide predictive alarming

Programs are expressed as JavaScript, stored as configuration in Process Nodes, and executed on a schedule or as new data is acquired. Each program can access any Node within a Workspace and it's associated time-series data.

Process Nodes
-------------
There are two types of Nodes that can have a process defined as part of their configuration. The first is any existing Parameter; once a process is written and compiled in the configuration of a Parameter, it becomes a Process Parameter. The second is a special type of Data Source called a Processor.

Process Parameter
~~~~~~~~~~~~~~~~~

[screenshot of code window showing single return statement]

A Process Parameter can be any existing Parameter which has a process written and compiled in it's configuration. The process can refer to any other Parameters in the Workspace as inputs (even other Process Parameters). The first input that is referred to will be used to define the timestamps used by the output of the process. Each execution of the process must return a single output value. The number of new input values available since the last process execution will determine how many times the process will be executed. This cumulative output is then stored as the time-series values of the Process Parameter, and can then be viewed in the same way as any other Parameter (for example, it can be shown as a table or chart, exported, used as input for a different process, etc.). The output can also have states defined which will trigger alarms, in the same way as any regular Parameter. 


Processor
~~~~~~~~~

[screenshot of code window showing multiple functions and outputs]

[screenshot of output parameters generated from code]

A Processor is a type of Data Source containing a process that generates multiple output values, which are stored as new Parameters. The timestamps of the output data can be generated by scheduling the execution of the process, in the same way that data acquisition of a regular Data Source can be scheduled. Alternatively, the timestamps can be defined by the first input, just as with Process Parameters. Another feature shared with Process Parameters is the ability to refer to any other Nodes in the Workspace as inputs. Note that as the Processor is a type of Data Source, it will contribute to the total number of Data Sources that are counted when billing the account.


+-----------------------------+--------------------------------+------------------------------+
|                             | Process Parameter              | Processor                    |
+=============================+================================+==============================+
| **Node Type**               | Parameter                      | Data Source                  |
+-----------------------------+--------------------------------+------------------------------+
| **Number of output values** | Single                         | Multiple                     |
+-----------------------------+--------------------------------+------------------------------+
| **Timestamps for output**   | Copied from first input        | - Generated by schedule      |
|                             |                                | - OR Copied from first input |
+-----------------------------+--------------------------------+------------------------------+
| **Input scope**             | Any Node in the Workspace      | Any Node in the Workspace    |
+-----------------------------+--------------------------------+------------------------------+
| **Execution trigger**       | When any input Node is updated | Set by schedule              |
+-----------------------------+--------------------------------+------------------------------+
| **Contributes to billing**  | No                             | Yes                          |
+-----------------------------+--------------------------------+------------------------------+



Process Alarm
-------------
A Process Alarm is a specific type of Alarm which is raised when a process encounters an error during execution. A subsequent successful execution of the process with clear the alarm.

Errors
------
The two general category of errors than can be encounted with Proccessing and Logic are compilation errors and runtime errors. 

Compilation Errors
~~~~~~~~~~~~~~~~~~
Compilation errors are a specific type of error that is caused by either by incorrect syntax or some other error condition that can be detected by the compiler. Compilation errors are experienced as immediate feedback when compiling a program, and will contain a specific error message which can be used to remedy the problem. A successful compilation indicates there are no compilation errors. A program will not be executed until it can be compiled without errors.

Runtime Errors
~~~~~~~~~~~~~~
Runtime errors can occur during the execution of a program even when it compiled successfully. For example, if an input node referenced by the program is deleted from the workspace, the program will no longer be able to run successfully. These types of errors will be expressed as process alarms, and will contain a specific error message to help remedy the problem. 

Best Practices
--------------
- Inputs should be declared before they are referenced, so that any line numbers in error messages will clearly refer to the declaration of a missing input.
- Very complex or time-consuming calculations may cause the process to exceed the allowed processing time limit. 
- **Any** input that is referenced by a process will trigger execution of the process when that input is updated. Therefore, a large number of inputs being updated frequently or on different schedules can trigger a process to run very frequently. For example, if 9 inputs are updated every hour, but the 10th input is updated every minute, then the process will execute every minute.
- As the first referenced input is used to determine the output timestamp for a Process Parameter, the input which updates most frequently should be the first input.

.. raw:: latex

    \newpage